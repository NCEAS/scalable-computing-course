---
title: "Reproducibility and Containers"
---

TODO: Decide about if/how to talk about WholeTale

## Learning Objectives

- Learn about software versioning
- Become familiar with Docker as a tool to improve computational reproducibility

## Outline

- Introduce software reproducibility
    - Motivate the idea with examples and data
    - Talk about software collapse
        - http://blog.khinsen.net/posts/2017/01/13/sustainable-software-and-reproducible-research-dealing-with-software-collapse/
        - https://xkcd.com/2347/
- Semantic versioning and the reality of it
    e.g., https://pandas.pydata.org/docs/development/policies.html#version-policy
- MyBinder
- WholeTale?

Examples to look at including:

- https://numpy.org/neps/nep-0023-backwards-compatibility.html#example-cases
- https://github.com/scipy/scipy/issues/16418
> https://pandas.pydata.org/docs/whatsnew/v1.4.0.html#deprecations: DataFrame.append() and Series.append() have been deprecated and will be removed in a future version. Use pandas.concat() instead (GH35407).

Principles to get across:

1. You probably should be thinking about software versioning
    - Know which version of versions of Python your code was written/tested under and keep track of that in a machine-readable way
    - Know the specific versions, of at least the specific MAJOR.MINOR of the packages your code was written+tested under and keep track of them in a machine-readable way (ie requirements.txt)

## Hands-off Demo

Show students an example of containerizing a workflow so it runs using a past version of Python and pinned versions of packages.
Ideally find an example where behavior changes based on the Python or one or more package versions.
