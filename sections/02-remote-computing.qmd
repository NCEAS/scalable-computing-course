---
title: "Remote Computing"
---

## Learning Objectives

- Understand the basic architecture of computer networks

- Become familiarized with Bash Shell programming to navigate your computer's file system **(??)**

- Learn how to connect to a remote computer via a shell

## Introduction

- Scientific synthesis and our ability to effectively and efficiently work with big data depends on the use of computers & the internet

- VS Code + remote development on a cluster is easy and way faster than your local machine

## Servers & Networking

- Host computers connect via networking equipment and can send messages to each other over communication protocols (aka internet protocols)

:::callout-note 
Host computers can take the role of **client** (the host *initiating* the request) or **server** (the host *responding* to a request), though these are not inherent properies of a host (i.e. the same machine can play both roles). Hosts typically have one network address but can have many different ones (for example, adding multiple network cards to a single server increases bandwith).
:::

:::callout-important GET FEEDBACK ON VISUAL + ADD KUBERNETES CONFIGURATION VISUAL
![](../images/remote-computing-configs.png)
:::

## IP addressing

- Hosts are assigned a **unique numerical address** used for all communication and routing called an [Internet Protocol Address (IP Address)](https://en.wikipedia.org/wiki/IP_address). They look something like this: 128.111.220.7

- Each IP Address can be used to communicate over various "ports", which allows multiple applications to communicate with a host without mixing up traffic

- IP addresses can be difficult to remember, so they are also assigned **hostnames**

    - Hostnames are handled through the global [Domain Name System (DNS)](https://en.wikipedia.org/wiki/Domain_Name_System)

    - Clients first look up a hostname in DNS to find the IP address, then they open a connection the the IP address
    
        - aurora.nceas.ucsb.edu == 128.111.220.46 **(UPDATE THIS WITH SERVER USED FOR COURSE?)**

        - UPDATE NOTE: e.g. aurora has multiple network cards

## Bash Shell Programming

- *What is a shell?* From [Wikipedia](https://en.wikipedia.org/wiki/Shell_(computing)) 

> "a computer program which exposes an operating system's services to a human user or other programs. In general, operating system shells use either a command-line interface (CLI) or graphical user interface (GUI), depending on a computer's role and particular operation."

- *What is Bash Shell?* A command line tool (language) commonly used to manipulate files and directories 

    - **Mac:** bash via the [Terminal](https://support.apple.com/guide/terminal/welcome/mac) **(QUESTION: Mac users may have to switch from zsh to bash? `exec bash`? or `exec zsh` to switch back)**

    - **Windows:** bash via [Git Bash](https://gitforwindows.org/)

:::callout-note
Mac users may have to switch from zsh to bash. Use the command `exec bash` to switch your default shell to bash (or `exec zsh` to switch switch back)
:::

## Some group exercise:

 - Navigate file system (show that this is equivalent to using Finder/Windows version), create a file, edit file, etc.

    - `pwd`
    - `cd`
    - `ls`
    - `tree` visualize directory structures
    - `touch` 
    - `mkdir`
    - `grep`
    - `auk`, `sed`, `cut`, `join` useful for manipuating files
    - `top`, `htop`

## Connecting to a remote computer via a shell

- You can use a shell to gain accesss to and remotely control other computers (manage/transfer files/etc). To do so, you'll need the following:

    - remote computer (e.g. server) turned on

    - IP address or name of remote computer

    - necessary permissions to access the remote computer

- Secure Shell, or SSH, is often used for securely connecting to and running shell commands on a remote host.

    - SSH tremendously simplifies remote computing

    - Supported out-of-the-box on Linux and Macs 

## Exercise:

1. Launch your Terminal program:

    - **MacOS:** navigate to `Applications | Utilities` and open `Terminal` 

    - **Windows:** Navigate to `Windows Start | Git` and open `Git Bash` UPDATE: see if this still stands

    - **ALTERNATIVELY, from VS Code:** Two options to open a terminal program

         a) Click on `Terminal | New Terminal` in top menu bar

         b) Click on the `+ (dropdown menu) | bash` in the bottom right corner

2. Connect to a remote server **(UPDATE THIS SECTION)**

```
samanthacsik:~$ ssh scsik@included-crab.nceas.ucsb.edu
scsik@included-crab.nceas.ucsb.edu's password: 
scsik@included-crab:~$ 
```

:::callout-warning KEEP THIS? 
3. Change your password **(UPDATE THIS SECTION)**

```
scsik@included-crab:~$ passwd
Changing password for scsik.
(current) UNIX password: 
Enter new UNIX password: 
Retype new UNIX password: 
```
:::

4. **create python script on server | write/execute some code | etc**


UPDATE: write a simple shell script that does something -- e.g. renaming files with bash loop (e.g. change extension, add date, move them around)

UPDATE: `nohup`, `screen`, `tmux` for starting remote job that you can come back to later; look for tmux lesson in oss training