---
title: "Remote Computing"
---

## Learning Objectives

- Understand the basic architecture of computer networks

- Become familiarized with Bash Shell programming to navigate your computer's file system **(??)**

- Learn how to connect to a remote computer via a shell

## Introduction

- Scientific synthesis and our ability to effectively and efficiently work with big data depends on the use of computers & the internet

- VS Code + remote development on a cluster is easy and way faster than your local machine

## Servers & Networking

Host computers connect via networking equipment and can send messages to each other over communication protocols (aka an [Internet Protocol](https://en.wikipedia.org/wiki/Internet_Protocol), or IP). Host computers can take the role of **client** or **server**, though these are not inherent properties of a host (i.e. the same machine can play either role). 

- **Client**: the host *intiating* a request
- **Server**: the host **responding* to a request

::: {.callout-note}
 Hosts typically have one network address but can have many different ones (for example, adding multiple network cards to a single server increases bandwith).
:::

::: {.callout-important} GET FEEDBACK ON VISUAL + ADD KUBERNETES CONFIGURATION VISUAL
![](../images/remote-computing-configs.png)
:::

## IP addressing

Hosts are assigned a **unique numerical address** used for all communication and routing called an [Internet Protocol Address (IP Address)](https://en.wikipedia.org/wiki/IP_address). They look something like this: **128.111.220.7**. Each IP Address can be used to communicate over various "ports", which allows multiple applications to communicate with a host without mixing up traffic. 

Because IP addresses can be difficult to remember, they are also assigned **hostnames**, which are handled through the global [Domain Name System (DNS)](https://en.wikipedia.org/wiki/Domain_Name_System). Clients first look up a hostname in the DNS to find the IP address, then open a connection to the IP address.
    
::: {.callout-note} 
The IP address for included-crab.nceas.ucsb.edu is _______. 
:::

## Bash Shell Programming

*What is a shell?* From [Wikipedia](https://en.wikipedia.org/wiki/Shell_(computing)) 

> "a computer program which exposes an operating system's services to a human user or other programs. In general, operating system shells use either a command-line interface (CLI) or graphical user interface (GUI), depending on a computer's role and particular operation."

*What is Bash?* Bash, or **B**ourne-**a**gain **Sh**ell, is a command line tool (language) commonly used to manipulate files and directories. Accessing and using bash is slightly different depending on what type of machine you work on:

    - **Mac:** bash via the [Terminal](https://support.apple.com/guide/terminal/welcome/mac), which comes ready-to-use with all Macs

    - **Windows:** bash via [Git Bash](https://gitforwindows.org/), which needs to be installed

::: {.callout-note}
Mac users may have to switch from [Z Shell](https://www.zsh.org/), or zsh, to bash. Use the command `exec bash` to switch your default shell to bash (or `exec zsh` to switch switch back)
:::

Some commonly used (and very helpful) bash commands:

| bash command     | what it does                                                                  |
|------------------|-------------------------------------------------------------------------------|
|      `pwd`       | print your current working directory                                          | 
|      `cd`        | change directory                                                              |
|      `ls`        | list contents of a directory                                                  |
|      `tree`      | display the contents of a directory in the form of a tree structure           |
|      `touch`     | create a new empty file                                                       |
|      `mkdir`     | create a new directory                                                        |
|      `grep`      | searches a given file(s) for lines containing a match to a given pattern list |
|      `auk`       |
|      `sed`       | stands for **S**tream **Ed**itor; a versatile command for editing files       |
|      `cut`       | extract a specific portion of text in a file                                  |
|      `join`      | join two files based on a key field present in both                           |
|   `top`, `htop`  | view running processes in a Linux system                                      |

## Connecting to a remote computer via a shell

You can use a shell to gain accesss to and remotely control other computers (manage/transfer files/etc). To do so, you'll need the following:

    - a remote computer (e.g. server) turned on

    - the IP address or name of remote computer

    - the necessary permissions to access the remote computer

Secure Shell, or SSH, is a network communication protocol that is often used for securely connecting to and running shell commands on a remote host. SSH temendously simplifies remote computing because ______, and it is supported out-of-the-box on Linux and Macs. If working on a Windows machine, you'll need ____.

## Exercise:

1. Launch your Terminal program:

    - **MacOS:** navigate to `Applications | Utilities` and open `Terminal` 

    - **Windows:** Navigate to `Windows Start | Git` and open `Git Bash` UPDATE: see if this still stands

    - **ALTERNATIVELY, from VS Code:** Two options to open a terminal program

         a) Click on `Terminal | New Terminal` in top menu bar

         b) Click on the `+ (dropdown menu) | bash` in the bottom right corner

2. Connect to a remote server 

You can choose to SSH into the server (included-crab.nceas.ucsb.edu) through the command line by using the `ssh` command, or through VS Code's command palette. If you prefer the latter, please refer back to the [**Log in to the server** section](https://learning.nceas.ucsb.edu/2022-09-arctic/#log-in-to-the-server). Doing so via the command line should look something like this:

```{bash}
samanthacsik:~$ ssh scsik@included-crab.nceas.ucsb.edu 
scsik@included-crab.nceas.ucsb.edu's password: 
scsik@included-crab:~$ 
```

::: {.callout-important}
You won't see anything appear as you type your password!
:::

::: {.callout-warning} DO WE NEED THIS SECTION? 
3. Change your password

```
scsik@included-crab:~$ passwd
Changing password for scsik.
(current) UNIX password: 
Enter new UNIX password: 
Retype new UNIX password: 
```
:::

4. **Write a bash shell script**


UPDATE: write a simple shell script that does something -- e.g. renaming files with bash loop (e.g. change extension, add date, move them around)

UPDATE: `nohup`, `screen`, `tmux` for starting remote job that you can come back to later; look for tmux lesson in oss training