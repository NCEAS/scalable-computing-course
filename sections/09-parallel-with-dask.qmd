---
title: "Parallelization with Dask"
---

## TODO

- Find dataset(s) to use:
    - https://arcticdata.io/catalog/view/doi%3A10.18739%2FA24B2X59C
        "Understory micrometorology across a larch forest density gradient in northeastern Siberia 2014-2020"
        ~50MB, has a few different axes to filter on
    - https://arcticdata.io/catalog/view/doi%3A10.18739%2FA28W38388
        "River and lake ice phenology data for Alaska and Northwest Canada from 1882 to 2021"
    - Also check out candidats in the xarray lesson TODO section

## Learning Objectives

- Learn about the map-reduce
- Learn how to use Dask

## Introduction

TODO

### Notes

- https://www.dask.org/
- https://docs.xarray.dev/en/stable/user-guide/dask.html#dask
- https://stephanhoyer.com/2015/06/11/xray-dask-out-of-core-labeled-arrays/
- https://examples.dask.org/xarray.html
- Good example to base exercise on: https://examples.dask.org/applications/image-processing.html

- Split-apply-combine
- Dask stuff
    - Lazy eval (compute())
        - Grouping compute() calls versus calling compute() multiple times
    - Dask Array
    - Dask DataFrame
    - Skip or just mention Bag, Delayed, Futures? Not sure yet.
    - visualize()
    - Choosing how many chunks to divide work into
    - Task overhead
    - Distributed dask?
        - Persist
> Dask is convenient on a laptop. It installs trivially with conda or pip and extends the size of convenient datasets from “fits in memory” to “fits on disk”.

-- From https://docs.dask.org/en/stable/

## Dask Tutorial

TODO
## Exercise

TODO
(50min)


## Conclusion

- Comparison with other libraries
    Thread pools, process pools, distributed dask clusters
