---
title: "Python Programming on Clusters"
---

## Learning Objectives

- Basic Python review
- Using virtual environments
- Writing in Jupyter notebooks
- Writing functions in Python

## Introduction

* VS Code + remote development on a cluster is easy and way faster than your local machine
* Jupyter is a great way to do literate analysis
* Functions provide ways to reuse your code across notebooks/projects

## Starting a project

* Connect to the server
* Start a `training` workspace

## Virtual Environments

Why virtual environments? We'll answer this.

First we will create `.bash_profile` file to create variables that point to the install locations
of python and `virtualenvwrapper`. `.bash_profile` is just a text file that contains bash commands
that are run every time you start up a new terminal. Although setting up this file is not required
to use `virtualenvwrapper`, it is convenient because it allows you to set up some reasonable defaults
to the commands (meaning less typing, overall), and it makes sure that the package is available every
time you start a new terminal.

To set up the `.bash_profile`. In VS Code, select "File > New Text File" then paste this into the file:

```
export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3
export VIRTUALENVWRAPPER_VIRTUAWORKON_HOME=$HOME/.virtualenvs
source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
```

The first line points `virtualenvwrapper` to the default python installation to use. In this case, we
point it to the system wide install of python on the server. The next line sets the directory where
your virtual environments will be stored. We point it to a hidden directory (`.virtualenvs`) in your home directory.
Finally, the last line sources a bash script that ships with `virtualenvwrapper`, which makes all of `virtualenvwrapper`
commands available in your terminal session.

Save the file in the top of your home directory as `.bash_profile`.

Restart your terminal, then check to make sure it was installed and configured correctly

```
mkvirtualenv --version
```

Now we can create the virtual environment we will use for the course

```
mkvirtualenv scomp
```

By default, this will point to our Python 3.9 installation on the server, because of the settings in
`.bash_profile`. If you want to point to a different version of python, or be more explicit about the
version, you can use the `-p` flag and pass a path to the python install, like so:

```
 mkvirtualenv -p /usr/bin/python3 test
```

After making a virtual environment, it will automatically be activated. You'll see the name of the env
you are working in on the left side of your terminal prompt in parentheses. To deactivate your environment
(like if you want to work on a different project), just run `deactivate`. To activate it again, run

```
workon scomp
```

You can get a list of all available environments by just running:

```
workon
```

Now let's install the dependencies for this course into that environment. (Note: need to figure out how to get them this file)

```
python3 -m pip install -r requirements.txt
```

#### Installing locally (optional)

`virtualenvwrapper` was already installed on the server we are working on. To install on your local computer,
run:

```
pip3 install virtualenvwrapper
```

And then follow the instructions as described above, making sure that you have the correct paths set
when you edit your `.bash_profile`.

## Brief overview of python syntax

Assign values to variables using `=`

```{python}
x = 4
print(x)
```

There are 5 standard data types in python

- Number (int, long, float, complex)
- String
- List
- Tuple
- Dictionary

We already saw a number type, here is a string:

```{python}
str = "Hello World!"
print(str)
```

Lists in python are very versatile, and are created using square brackets `[]`. Items in a list can be of different data types.

```{python}
list = [100, 50, -20, "text"]
print(list)
```

You can access items in a list by index using the square brackets. Note indexing starts with 0 in python. The slice operator enables you to easily access a portion of the list without needing to specify every index.

```{python}
list[0] # print first element
list[1:3] # print 2nd until 4th elements
list[:2] # print first until the 3rd
list[2:] # print last elements from 3rd
```

The `+` and `*` operators work on lists by creating a new list using either concatenation (`+`) or repetition (`*`).

```{python}
list2 = ["more", "things"]

list + list2
list * 2
```

Tuples are similar to lists, except the values cannot be changed in place. They are constructred with parentheses.

```{python}
tuple = ('a', 'b', 'c', 'd')
tuple[0]
tuple * 3
tuple + tuple
```

Observe the difference when we try to change the first value.

```{python}
list[0] = "new value"
list
```

```{python}
#| eval: false
tuple[0] = "new value"
```

```
TypeError: 'tuple' object does not support item assignment
```

Dictionaries consist of key-value pairs, and are created using the syntax `{key: value}`. Keys are usually numbers or strings, and values can be any data type.

```{python}
dict = {"name": ["Jeanette", "Matt"],
        "location": ["Tucson", "Juneau"]}

dict["name"]
dict.keys()
```

## Jupyter notebooks

* Create a notebook
* Load in some libraries (pandas, numpy, scipy, matplotlib)
* Read in a csv
* group and summarize by a variable
* create a simple plot

## Functions

* create `myplot.py`
* write `myplot()` function to create the same plot we did in section above
* load myplot into jupyter notebook (`from myplot.py import myplot`)
* replace old plot method with new function
* more to come in Bryce's section

## Resources

