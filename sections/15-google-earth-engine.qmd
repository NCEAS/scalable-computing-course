---
title: "Google Earth Engine"
---
::: {.callout-important}
## TODO
 - need to make sure that .ipynb that student's will work out of are running in same virutal enviroment as everything else
 - embed .ipynb into quarto notebook (get book to build from those examples)
 - use Ryan Abernathey's [post](https://medium.com/pangeo/closed-platforms-vs-open-architectures-for-cloud-native-earth-system-analytics-1ad88708ebb6) to help frame introduction
:::

## Learning Objectives

- Understand what Google Earth Engine provides and its applications
- Learn how to search for, import, manipulate, and visualize Google Earth Engine Data
- Learn about some real-world applications of Google Earth Engine in Earth systems research

## Introduction 

[Google Earth Engine](https://earthengine.google.com/) (GEE) is a geospatial processing platform powered by Google Cloud Platform. It contains over 30 years (and multiple petabytes) of satellite imagery and geospatial datasets that are continually updated and available instantly. Users can process data using Google Cloud Platform and built-in algorithms or by using the Earth Engine API, which is available in Python (and JavaScript) for anyone with an account (Earth Engine is free to use for research, education, and nonprofit use). 
<br> 

<center><img src="../images/gee.gif" alt="" width="600"/></center>
<center><span style = 'font-size: 85%; color: #6e6d6d;'>Image Source: [Earth Engine Data Catalog](https://developers.google.com/earth-engine/datasets)</span></center>

<br>
So what's so exciting about platforms like GEE? [Ryan Abernathey](https://scholar.google.com/citations?user=t1lmjVkAAAAJ&hl=en) frames this nicely in his blogpost [Closed Platform vs. Open Architectures for Cloud-Native Earth System Analytics](https://medium.com/pangeo/closed-platforms-vs-open-architectures-for-cloud-native-earth-system-analytics-1ad88708ebb6)...

-  as Earth System data have gotten larger, the typical download-data-work-locally workflow is no longer always feasible
-  those data are also produced and distributed by lots of different organizations (e.g. [NASA](https://www.nasa.gov/), [NOAA](https://www.noaa.gov/), [Copernicus](copernicus.eu/en))
- researchers often need to apply a wide range of analytical methods to those data, ranging from simple stats to machine learning approaches

GEE offers web access (i.e. no need to download data to your computer) to an extensive catalog of analysis-ready geospatial data (from many different organizations) and scalable computing power via their cloud service, making global-scale analyses and visualizations possible for anyone with an account ([sign up here](https://signup.earthengine.google.com)!)

Explore the public [Earth Engine Data Catalog](https://developers.google.com/earth-engine/datasets/catalog) which includes a variety of standard Earth science raster datasets. Browse by [dataset tags](https://developers.google.com/earth-engine/datasets/tags) or by satellite ([Landsat](https://developers.google.com/earth-engine/datasets/catalog/landsat), [MODIS](https://developers.google.com/earth-engine/datasets/catalog/modis), [Sentinel](https://developers.google.com/earth-engine/datasets/catalog/sentinel)). 

In this lesson, we'll get some hands-on practice connecting to and using Google Earth Engine to visualize global precicpation data. We'll then **__________Ingmar's plan here__________**.

## **Exercise 1:** An introductory lesson on using Google Earth Engine

### **Part i.** Setup

::: {.callout-note}
## Necessary libraries are already installed in the `scomp` virtual environment

We'll be using a few different libraries in the next exercises/demos that should already be installed if you successfully set up your `scomp` virtual environment. If you eventually find yourself working outside our virtual environment, you'll want need to install the following libraries: 

```{.bash}
#| eval: false
pip install earthengine-api # the GEE API
pip install ee # Google Earth Engine interface
pip install geemap # package for interactive maping with GEE 
```
:::

1. Create a Google Earth Engine account (if you haven't already done so) 

::: {.callout-important}
## TODO: move to preface
GEE authentication (step 3, below) use [Cloud Projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects). Some organizations (like UCSB) control who can create Cloud Projects, which may prevent you from completing the authentication process. To circumvent authentication issues, we recommend creating your GEE account using a non-orgnaizational account (e.g. a personal gmail account). Check out GEE's [authentication troubleshooting recommendations](https://developers.google.com/earth-engine/guides/python_install#troubleshooting-authentication-issues) if you continue to run into issues.
:::

-  Refer back to the [Preface](https://learning.nceas.ucsb.edu/2022-09-arctic/#create-a-free-google-earth-engine-gee-account)
to find instructions on creating a GEE account.

2. Load libraries

```{python}
import ee
import geemap
```

3. Authenticate your GEE account

-  In order to begin using GEE, you'll need to connect your environment (`scomp`) to the authentication credentials associated with your Google account. This will need to be done each time you connect to GEE, (but only be done once per session). 

```{python}
#| eval: false
ee.Authenticate() # triggers the authentication process
```

-  This should launch a browser window where you can login with your Google account to the Google Earth Engine Authenticator. Following the prompts will generate a code, which you'll then need to copy and paste into the VS Code command palette (at the top of the IDE). This will be saved as an authentication token so you won't need to go through this process again until the next time you start a new session. The browser-based authentication steps will look something like this:

a. **Notebook Authenticator:** choose an active Google account and Cloud Project (you may have to create one if this is your first time authenticating) and click "Generate Token"  
b. **Choose an account:** if prompted, select the same Google account as above
c. **Google hasn't verified this app:** You may be temped to click the blue "Back to saftey" button, but don't! Click "Continue"  
d. **Select what Earth Engine Notebook Client can access:** click both check boxes, then "Continue"  
e. Copy your authentication code to your clipboard to paste into the VS Code command palette

4. Lastly, intialize. This verifies that valid credentials have been created and populates the Python client library with methods that the backend server supports.

```{python}
#| eval: false
ee.Initialize() 
```

If successful, you're now ready to begin working with Earth Engine data!

### **Part ii.** Explore the ERA5 Daily Aggregate Data

:::{.callout-important}
## TODO
- <https://developers.google.com/earth-engine/datasets/catalog/ECMWF_ERA5_DAILY#description>
- what is an `ImageCollection` (and check with Ingmar on what data object types he'll be working with)
- show bands tab for ERA5 dataset
:::

### **Part iii.** Visualize global precipitation data using ERA5 Daily Aggregate data

*Content for this section was adapted from Dr. Sam Stevenson's [Visualizing global precipitation using Google Earth Engine](https://github.com/samanthastevenson/EDS220_Fall2021/blob/main/Week1_ERA5Maps_GEE.ipynb) lesson, given in her [EDS 220 course](https://samanthastevenson.github.io/EDS220_site/) in Fall 2021.*

1. Create an interactive basemap

The default basemap is (you guessed it) Google Maps. The following code displays an empty Google Map that you can manipulate just like you would in the typical Google Maps interface. Do this using the `Map` method from the `geemap` library. We'll also center the map at a specified latitude and longitude (here, 40N, 100E), set a zoom level, and save our map as an object called `myMap`.

```{python}
myMap = geemap.Map(center = [40, -100], zoom = 2)
myMap
```

2. Load ERA5 Image Collections from GEE

::: {.callout-important}
## TODO
* NOTE: ADC has worked with these data -- took 3 weeks to download
* EE colleciton is all you need to load and analyze imgage collection
* precursor to Ingmar's stuff
* MOVE CONTENT BELOW TO PART II
:::

Next, we need to tell GEE what data to layer on top of our basemap. We'll be using the ERA5 daily aggregates reanalysis dataset, produced by the [European Centre for Medium-Range Weather Forecasts](https://www.ecmwf.int/) (ECMWF), found [here](https://developers.google.com/earth-engine/datasets/catalog/ECMWF_ERA5_DAILY), which models atmospheric weather observations. We'll load the `total_precipitation` field (check out the metadata on [here](https://developers.google.com/earth-engine/datasets/catalog/ECMWF_ERA5_DAILY#bands)).

::: {.column-margin}
Reanalysis combines observation data with model data to provide the most complete picture of past weather and climate. To read more about reanalyses, check out the [EWCMWF website](https://www.ecmwf.int/en/about/media-centre/focus/2020/fact-sheet-reanalysis#:~:text=What%20is%20reanalysis%3F,with%20modern%20weather%20forecasting%20models.)
:::

The `ImageCollection` method extracts a set of individual images that satisfies some criterion that you pass to GEE through the `ee` package. This is stored as an **ImageCollection** object which can be filtered and processed in various ways. We can pass the `ImageCollction` method agruments to tell GEE which data we want to retrieve. Below, we retrieve all daily ERA5 data (so we can see individual rain events).

::: {.callout-tip}
## Earth Engine Snippets make importing ImageCollections easy!
To import an ImageCollection, copy and paste the Earth Engine Snippet for your dataset of interest. For example, the Earth Enginge Snippet to import the ERA5 daily aggregates data can be found on the [dataset page](https://developers.google.com/earth-engine/datasets/catalog/ECMWF_ERA5_DAILY).
:::

```{python}
weatherData = ee.ImageCollection('ECMWF/ERA5/DAILY')
```

3. Select an image to plot

To plot a map over our Google Maps basemap, we need an "Image" rather than an "ImageCollection." ERA5 contains many different climate variables, so we need to pick what we'd like to plot. We'll use the `.select` method to choose the parameter(s) we're interested in from our `weatherData` object.

```{python}
# select desired bands (total_preciptation)
precip = weatherData.select("total_precipitation")
```

We can look at our `precip` object using the `print` method to see that it's still an "ImageCollection" which contains daily information from 1979 to 2020. 

```{python}
print(precip)
```

::: {.callout-note}
You may see a message in the VS Code Interactive pane that says, **"Output exceeds the size limit. Open the full output data in a text editor"** when printing your image object. Click here to see the entire output, which includes date range information.
:::

We want to filter it down to a single field for a time of interest -- let's say December 1-2, 2019. We apply the `.filter` method to our `precip` object and apply the `ee.Filter.date` method (from the `ee` package) to filter for data from our chosen date range. We also apply the `.mean` method, which takes whatever precedes it and calculates the average.

```{python}
precip_filtered = precip.filter(ee.Filter.date('2019-12-01', '2019-12-02')).mean()
print(precip_filtered)
```

```{python}
#| eval: false
#| ALTERNATIVELY
# initial date of interest (inclusive)
# i_date = '2000-01-01'

# final data of interest (exclusive)
# f_date = '2020-01-01'

# select apporpriate bands (total_preciptation) and dates
# precip = weatherData.select("total_precipitation").filterDate(i_date, f_date)
```

5. Add data to map

We can fist use the `setCenter` method to tell the map where to center itself. It takes the longitude and latitude as the first two coordinates, followed by the zoom level.

```{python}
myMap.setCenter(lat = 60.335998656, lon = -151.87166318, zoom = 4) # Cook Inlet, Alaska 
```

Next, set a color palette to use when plotting the data layer. The following is a palette specified for precipitation in the GEE description page for ERA5. GEE has lots of color tables like this that you can look up. 

```{python}
#| eval: false
precip_palette = = {
    'min':0,
    'max':0.1,
    'palette': ['#FFFFFF', '#00FFFF', '#0080FF', '#DA00FF', '#FFA400', '#FF0000']
}
```

Finally, plot our filtered data, `precip_filtered` on top of our basemap using the `.addLayer` method. We'll aslo pass it our visualization parameters (colors and ranges stored in `precip_palette`, the name of the data field `total precipitation`, and opacity so that we can see the basemap underneath)

```{python}
#| eval: false
myMap.addLayer(precip_filtered, precip_palette, 'total precipitation', opacity = 0.3)
```

## **Exercise 2:** Ingmar's Demo

::: {.callout-important}
## TODO
Add content here
:::

## Conclusion/Summary 

::: {.callout-important}
## TODO
* lessons learned
* utilities
* etc.
:::

## Other Resources

- [GEE Code Editor](https://code.earthengine.google.com/),a web-based IDE for using GEE (JavaScript)
- [`earthengine-api` installation instructions](https://developers.google.com/earth-engine/guides/python_install)
- [Creating and managing Google Cloud projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects)
- [Troubleshooting authentication issues](https://developers.google.com/earth-engine/guides/python_install#troubleshooting-authentication-issues)
- [An Intro to the Earth Engine Python API](https://developers.google.com/earth-engine/tutorials/community/intro-to-python-api)