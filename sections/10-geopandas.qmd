---
title: "Spatial and Image Data Using GeoPandas"
author: Jeanette Clark
execute:
  freeze: auto
---

## Learning Objectives

- Reading raster data with rasterasterio
- Using geopandas and rasterasterio to process raster data
- Working with raster and vector data together

## Introduction

- Raster vs vector data
- What is a projection
- Processing overview
    - goal is to calculate vessel distance per [commercial fishing area](https://doi.org/10.5063/F1TD9VN9)

## Pre-processing raster data

This is a test to make sure we can run some code in this notebook.

```{python}
import geopandas as gpd
import rasterio
import rasterio.mask
# from rasterstats import zonal_stats
from shapely.geometry import Polygon
import requests
import matplotlib.pyplot as plt
import pandas as pd

```

Download the ship traffic raster from [Kapsar et al.](https://doi.org/10.18739/A2SQ8QJ9S). We grab a one month slice from December, 2020 of a coastal subset of data with 1km resolution.

```{python}
url_sf = 'https://cn.dataone.org/cn/v2/resolve/urn:uuid:dd61089d-f50e-4d87-9b75-6b4e2bd24776'

response_sf = requests.get(url_sf)
open("Coastal_2020_12.tif", "wb").write(response_sf.content)
```

Open the raster file, plot it, and look at the metadata.

```{python}
with rasterio.open("Coastal_2020_12.tif") as dem_src:
    ships = dem_src.read(1)
    ships_meta = dem_src.profile

plt.imshow(ships)
print(ships_meta)
```


##  Distance per commercial area

Now download a vector shapefile of commercial fishing districts in Alaska.


```{python}
url = 'https://knb.ecoinformatics.org/knb/d1/mn/v2/object/urn%3Auuid%3A7c942c45-1539-4d47-b429-205499f0f3e4'

response = requests.get(url)
open("Alaska_Commercial_Salmon_Boundaries.gpkg", "wb").write(response.content)

```

Read in the data

```{python}
comm = gpd.read_file("Alaska_Commercial_Salmon_Boundaries.gpkg")
```

The raster data is in 3338, so we need to reproject this.

```{python}
comm.crs
comm_3338 = comm.to_crs("EPSG:3338")

comm_3338.plot()
```

To (maybe) make things more efficient, we can extract the bounding box for the shapefile data and use that to clip the original raster data to just the extent we need. A simple function creates a list of 4 coordinate pairs from the 4 lower left/upper right points. This is then converted into a `geoDataFrame` to use with `rasterio`.

```{python}
# function to return polygon
def bbox(long0, lat0, lat1, long1):
  return Polygon([[long0, lat0], [long1,lat0], [long1,lat1], [long0, lat1]])

sh_bounds = comm_3338.total_bounds

coords = bbox(sh_bounds[0], sh_bounds[1], sh_bounds[2], sh_bounds[3])

bbox_crop = gpd.GeoDataFrame(pd.DataFrame(['p1'], columns = ['geom']),
    crs = 'EPSG:3338',
    geometry = [coords])
```

Read in raster again cropped to bounding box. 

```{python}
with rasterio.open("Coastal_2020_12.tif") as src:
    out_image, out_transform = rasterio.mask.mask(src, bbox_crop["geometry"], crop=True)
    out_meta = src.meta

out_meta.update({"driver": "GTiff",
                 "height": out_image.shape[1],
                 "width": out_image.shape[2],
                 "transform": out_transform})

with rasterio.open("Coastal_2020_12_masked.tif", "w", **out_meta) as dest:
    dest.write(out_image)
```


```{python}
plt.imshow(out_image[0])
```

## Calculate total distance per fishing area

```
zs = zonal_stats(comm_3338, "Coastal_2020_12_masked.tif", stats = "sum")
```

Wrangle the data and reattach distances to the original polygons

```
dist = [d['sum'] for d in zs]

res = pd.DataFrame({'STAT_AREA' : comm_3338["STAT_AREA"],
                    'distance' : dist})

res_summary = res.dropna(thresh = 0).query("distance > 0")

res_full = comm_3338.merge(res_summary, on = "STAT_AREA", how = 'left')
```

Group by/summarize across another variable

```
res_full.plot(column = "distance", legend = True)
```