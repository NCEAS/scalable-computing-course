# Preface {.unnumbered}

## About {-}

This 5-day in-person workshop will provide researchers with an introduction to advanced topics in computationally reproducible research in python and R, including software and techniques for working with very large datasets. This includes working in cloud computing environments, docker containers, and parallel processing using tools like parsl and dask. The workshop will also cover concrete methods for documenting and uploading data to the Arctic Data Center, advanced approaches to tracking data provenance, responsible research and data management practices including data sovereignty and the CARE principles, and ethical concerns with data-intensive modeling and analysis.


![](images/arctic-data-center.png)

<br>

### Schedule {-}

:::{.column-page}
![](images/00-schedule.png)
:::

### Code of Conduct {-}
Please note that by participating in this activity you agree to abide by the [NCEAS Code of Conduct](https://www.nceas.ucsb.edu/sites/default/files/2021-11/NCEAS_Code-of-Conduct_Nov2021_0.pdf). 


## Setting Up

In this course, we will be using Python (> 3.0) as our primary language, and VS Code as our IDE. Below are instructions on how to get VS Code set up to work for the course. If you are already a regular Python user, you may already have another IDE set up. We strongly encourage you to set up VS Code with us, because we will use your local VS Code instance to write and execute code on one of the NCEAS servers.

### Download VS Code and Remote - SSH Extension

First, [download VS Code](https://code.visualstudio.com/) if you do not already have it installed.

You'll also need to download the [Remote - SSH extension](https://code.visualstudio.com/docs/remote/ssh) .

### Log in to the server

To connect to the server follow these steps:

    - open the command pallette (Cmd + Shift + P)
    - enter "Remote SSH: Connect to Host"
    - select "Add New SSH Host"
    - enter the ssh command to connect to the host as if in a terminal (`ssh username@included-crab.nceas.ucsb.edu`)
        + Note: you will only need to do this step once
    - select the SSH config file to update with the name of the host (if prompted)
    - click "Connect" in the popup in the lower right hand corner
        + Note: If the dialog box does not appear, reopen the command palette (Cmd + Shift + P), type in "Remote-SSH: Connect to Hostâ€¦", choose included-crab.nceas.ucsb.edu from the options of configured SSH hosts, then enter your password into the dialog box that appears
    - enter your password in the dialog box that pops up

### Install extensions on the server

After connecting to the server, in the extensions pane (View > Extensions) search for, and install, the following extensions:

    - Python
    - Jupyter
    - Jupyter Keymap

Note that these extensions will be installed on the server, and not locally. 

### Test your local setup (Optional)

Locally (not connected to the server), check to make sure you have Python installed if you aren't sure you do. To do this, from the terminal run:

```
python3 --version
```

If you get an error, it means you need to install Python. Here are instructions for getting installed, depending on your operating system. Note: There are many ways to install and manage your Python installations, and advantages and drawbacks to each. If you are unsure about how to proceed, feel free to reach out to the instructor team for guidance.

* Windows: Download and run an installer from [Python.org](https://www.python.org/downloads/).
* Mac: Install using [homebrew](https://brew.sh/). If you don't have homebrew installed, follow the instructions from their webpage.
    - `brew install python3`

After you run your install, make sure you check that the install is on your system PATH by running `python3 --version` again.

This section summarizes the official VS Code tutorial. For more detailed instructions and screenshots, see the [source material.](https://code.visualstudio.com/docs/python/python-tutorial) If you already use VS Code for Python you can skip this.

First, install the [Python extension for VS Code](https://marketplace.visualstudio.com/items?itemName=ms-python.python). 

Open a terminal window in VS Code from the Terminal drop down in the main window. Run the following commands to initialize a project workspace in a directory called `training`. This example will show you how to do this locally. Later, we will show you how to set it up on the remote server with only one additional step.

```
mkdir training
cd training
code .
```

Next, select the Python interpreter for the project. Open the **Command Palette** using Command + Shift + P (Control + Shift + P for windows). The Command Palette is a handy tool in VS Code that allows you to quickly find commands to VS Code, like editor commands, file edit and open commands, settings, etc. In the Command Palette, type "Python: Select Interpreter." Push return to select the command, and then select the interpreter you want to use (your Python 3.X installation).

Finally, download the [Jupyter extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter). You can create a test Jupyter Notebook document from the command pallete by typing "Create: New Jupyter Notebook" and selecting the command. This will open up a code editor pane with a notebook that you can test.

To make sure you can write and execute code in your project, [create a Hello World test file](https://code.visualstudio.com/docs/python/python-tutorial#_create-a-python-hello-world-source-code-file).

* From the File Explorer toolbar, or using the terminal, create a file called `hello.py`
* Add some test code to the file, and save

```
msg = "Hello World"
print(msg)
```

* Execute the script using either the Play button in the upper-right hand side of your window, or by running `python3 hello.py` in the terminal.
    - For more ways to run code in VS Code, see the [tutorial](https://code.visualstudio.com/docs/python/python-tutorial#_create-a-python-hello-world-source-code-file)




## About this book

These written materials reflect the continuous development of learning materials at the Arctic Data Center and NCEAS to support individuals to understand, adopt, and apply ethical open science practices. In bringing these materials together we recognize that many individuals have contributed to their development. The primary authors are listed alphabetically in the citation below, with additional contributors recognized for their role in developing previous iterations of these or similar materials.

This work is licensed under a [Creative Commons Attribution 4.0 International License](http://creativecommons.org/licenses/by/4.0/).

**Citation**:  Matthew B. Jones, Bryce Mecum, S. Jeanette Clark, Samantha Csik. 2022. Scalable and Computationally Reproducible Approaches to Arctic Research.

**Additional contributors**: Amber E. Budden, Natasha Haycock-Chavez, Noor Johnson, Stephanie Hampton, Jim Regetz, Bryce Mecum, Julien Brun, Julie Lowndes, Erin McLean, Andrew Barrett, David LeBauer, Jessica Guo.




This is a Quarto book. To learn more about Quarto books visit <https://quarto.org/docs/books>.
